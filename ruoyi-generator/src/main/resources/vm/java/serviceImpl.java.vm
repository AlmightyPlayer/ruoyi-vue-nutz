package ${packageName}.service.impl;
import com.ruoyi.common.core.service.BaseServiceImpl;
import org.nutz.dao.Cnd;
import org.nutz.lang.Lang;
import java.util.List;
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
        import com.ruoyi.common.utils.DateUtils;
            #break
        #end
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
    #if($table.sub)
    import java.util.ArrayList;

    import com.ruoyi.common.utils.StringUtils;
    import org.springframework.transaction.annotation.Transactional;
    import ${packageName}.domain.${subClassName};
    #end
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends BaseServiceImpl<${ClassName}> implements I${ClassName}Service {
    public Cnd queryWrapper(${ClassName} ${className}) {
        Cnd cnd = Cnd.NEW();
        if (Lang.isNotEmpty(${className})){
#foreach($column in $columns)
    #set($queryType=$column.queryType)
    #set($javaField=$column.javaField)
    #set($javaType=$column.javaType)
    #set($columnName=$column.columnName)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #if($column.query)
        #if($column.queryType == "EQ")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , "=" , ${className}.get$AttrName());
            }
        #elseif($queryType == "NE")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , "!=" , ${className}.get$AttrName());
            }
        #elseif($queryType == "GT")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , ">" , ${className}.get$AttrName());
            }
        #elseif($queryType == "GTE")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , ">=" , ${className}.get$AttrName());
            }
        #elseif($queryType == "LT")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , "<" , ${className}.get$AttrName());
            }
        #elseif($queryType == "LTE")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , "<=" , ${className}.get$AttrName());
            }
        #elseif($queryType == "LIKE")
            if (Lang.isNotEmpty(${className}.get$AttrName())){
                cnd.and("$columnName" , "like" , "%" + ${className}.get$AttrName() + "%");
            }
        #elseif($queryType == "BETWEEN")
            if (Lang.isNotEmpty(${className}.getParams().get("begin$AttrName"))
                && Lang.isNotEmpty(${className}.getParams().get("end$AttrName"))){
                cnd.and("$columnName" , "<" , ${className}.getParams().get("end$AttrName"));
            }
        #end
    #end
#end
        }
        return cnd;
    }

    @Override
    public List<${ClassName}> query(${ClassName} ${className}) {
        return this.query(queryWrapper(${className}));
    }

    @Override
    public List<${ClassName}> query(${ClassName} ${className}, int pageNumber, int pageSize) {
        return this.query(queryWrapper(${className}), pageNumber, pageSize);
    }
}
